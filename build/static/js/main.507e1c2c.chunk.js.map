{"version":3,"sources":["connectors.js","components/Header.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["injected","InjectedConnector","supportedChainIds","Header","props","useWeb3React","active","account","activate","deactivate","useState","isConnecting","setIsConnecting","dropdownOpen1","setDropdownOpen1","connect","a","console","log","ex","useEffect","isAuthorized","then","detectProvider","provider","window","ethereum","web3","currentProvider","alert","onLoginHandler","error","request","method","onLogin","className","onClick","type","onMouseOver","onMouseLeave","isOpen","toggle","prevState","style","position","float","POLYGON_TESTNET_PARAMS","chainId","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","Minter","gasPrice","contract","setContract","file","setFile","filePreview","setFilePreview","nftName","setNftName","description","setDescription","minting","setMinting","status","setStatus","setTokenId","previewFileType","setFileType","previewFileName","setFileName","setIsMinted","setAddress","showAddress","setShowAddress","txHash","setTxHash","recipient","setRecipient","royalty","setRoyalty","showWalletInput","setShowWalletInput","networkSelected","setNetworkSelected","ethers","require","beforeUpload","fileList","URL","createObjectURL","uploadButton","Provider","value","size","marginLeft","marginTop","color","previewImg","src","width","previewVideo","controls","previewAudio","previewModel","loading","height","overrideEventDefaults","event","preventDefault","stopPropagation","handleOndragOver","handleOndrop","imageFile","dataTransfer","files","uploadView","onDrop","onDragEnter","onDragLeave","onDragOver","accept","listType","showUploadList","action","includes","endsWith","mintEnabled","addPolygonNetwork","getProvider","params","addEthNetwork","mintNFT","image","percentage","payout","client","NFTStorage","token","store","metadata","url","metadataURI","replace","Web3","eth","getAccounts","accounts","net","getId","networkId","networkData","Nft","networks","abi","address","Contract","tx","from","to","gas_price","data","methods","mintToken","encodeABI","getRoyaltyData","royaltyInfo","call","royaltyData","startMinting","providers","Web3Provider","getSigner","getAddress","newTokenId","mintButton","disabled","LoadingOutlined","copy","navigator","clipboard","writeText","id","onChange","for","placeholder","e","target","rows","defaultValue","onKeyDown","character","key","characterNum","Number","length","onWheel","blur","handleChange","substring","slice","getLibrary","App","setIsConnected","currentAccount","setCurrentAccount","onLogout","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","appId","serverUrl","document","getElementById"],"mappings":"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","file":"static/js/main.507e1c2c.chunk.js","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector';\r\n\r\nexport const injected = new InjectedConnector ({\r\n    supportedChainIds: [1, 3, 4, 5, 42, 56, 97, 80001, 1337],\r\n})","import React from 'react';\r\nimport { useState, useEffect} from 'react';\r\nimport { injected } from '../connectors';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { Dropdown } from \"reactstrap\";\r\n\r\nconst Header = (props) => {\r\n\r\n    const { active, account, activate, deactivate } = useWeb3React();\r\n    const [isConnecting, setIsConnecting] = useState(false);\r\n    const [dropdownOpen1, setDropdownOpen1] = useState(false);\r\n\r\n    useEffect(() => {\r\n        injected\r\n          .isAuthorized()\r\n          .then((isAuthorized) => {\r\n            if (isAuthorized && !active) {\r\n                // activate(injected)\r\n                connect()\r\n            }\r\n          })\r\n      }, [])\r\n\r\n    async function connect() {\r\n        try{\r\n            await activate(injected)\r\n        }\r\n        catch(ex){\r\n            console.log(ex);\r\n        }\r\n    }\r\n\r\n    async function disconnect() {\r\n        try{\r\n            deactivate();\r\n        }\r\n        catch(ex) {\r\n            console.log(ex);\r\n        }\r\n    }\r\n\r\n    const detectProvider = () => {\r\n        let provider;\r\n        if (window.ethereum) {\r\n            provider = window.ethereum;\r\n        }\r\n        else if (window.web3) {\r\n            provider = window.web3.currentProvider;\r\n        }\r\n        else {\r\n            window.alert(\"No Ethereum browser detected! Check out MetaMask.\");\r\n        }\r\n            return provider;\r\n    };\r\n    \r\n    const onLoginHandler = async () => {\r\n        const provider = detectProvider();\r\n\r\n        if (provider) {\r\n            if(provider !== window.ethereum) {\r\n                 console.error(\"Not window.ethereum provider. Do you have multiple wallets installed ?\");\r\n            }\r\n            setIsConnecting(true);\r\n            await provider.request({\r\n                method: \"eth_requestAccounts\",\r\n            });\r\n            setIsConnecting(false);\r\n            props.onLogin(provider);\r\n        } \r\n    };\r\n    \r\n       const toggle1 = () => {\r\n        setDropdownOpen1(prevState => (\r\n          !prevState\r\n        ));\r\n      }\r\n\r\n      const onMouseEnter = () => {\r\n        setDropdownOpen1( true );\r\n      }\r\n    \r\n      const onMouseLeave = () => {\r\n        setDropdownOpen1( false );\r\n      }\r\n\r\n        return(\r\n            <div>\r\n                <header className='stickyHeader'>\r\n                    <div onClick={onLoginHandler && connect} className=\"login-btn\" type=\"button\">\r\n                         {active ? <span onClick={disconnect}>Disconnect</span> : !isConnecting && <span>Connect</span> }\r\n                    </div>\r\n                    <Dropdown\r\n                        className=\"d-inline-block\"\r\n                        onMouseOver={onMouseEnter}\r\n                        onMouseLeave={onMouseLeave}\r\n                        isOpen={dropdownOpen1}\r\n                        toggle={toggle1}\r\n                        style={{ position: 'relative', float: 'right' }}\r\n                        >\r\n                        {active ? <div className=\"accountNumber\"><span>{account}</span></div> : null}\r\n                    </Dropdown>\r\n                </header>\r\n            </div>\r\n        )\r\n}\r\nexport default Header","import { useEffect, useState } from 'react';\r\nimport { IconContext } from 'react-icons';\r\nimport { AiOutlineCloudUpload } from 'react-icons/ai';\r\nimport Web3 from 'web3';\r\nimport Nft from '../src/abis/Nft.json';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport { NFTStorage } from 'nft.storage';\r\nimport { Upload, Button, Card } from 'antd';\r\nimport 'antd/lib/button/style/css';\r\nimport '@google/model-viewer';\r\nimport {Link} from 'react-router-dom';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { injected } from './connectors';\r\n\r\nexport const POLYGON_TESTNET_PARAMS = {\r\n  chainId: '0x13881', // 80001\r\n  chainName: 'Mumbai',\r\n  nativeCurrency: {\r\n    name: 'MATIC Token',\r\n    symbol: 'MATIC',\r\n    decimals: 18\r\n  },\r\n  rpcUrls: ['https://rpc-mumbai.maticvigil.com/'],\r\n  blockExplorerUrls: ['https://mumbai.polygonscan.com/']\r\n}\r\n\r\nexport const RINKEBY_TESTNET_PARAMS = {\r\n  chainId: '0x4',\r\n  chainName: 'Rinkeby Test Network',\r\n  nativeCurrency: {\r\n    name: 'ETH',\r\n    Symbol: 'ETH',\r\n    decimals: 18\r\n  },\r\n  rpcUrls: ['https://rinkeby.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161'],\r\n  blockExplorerUrls:[\"https://rinkeby.etherscan.io\"]\r\n}\r\n\r\nconst Minter = ({gasPrice}) => {\r\n\r\n    const [contract, setContract] = useState(null);\r\n    const [file, setFile] = useState(null);\r\n    const [filePreview, setFilePreview] = useState(null);\r\n    const [nftName, setNftName] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [minting, setMinting] = useState(false);\r\n    const [status, setStatus] = useState(\"\");\r\n    const [tokenId, setTokenId] = useState(null);\r\n    const [previewFileType, setFileType] = useState(\"\");\r\n    const [previewFileName, setFileName] = useState(\"\");\r\n    const [isMinted, setIsMinted] = useState(false);\r\n    const [address, setAddress] = useState(\"\");\r\n    const [showAddress, setShowAddress] = useState(false);\r\n    const [txHash, setTxHash] = useState(\"\");\r\n    const [recipient, setRecipient] = useState(\"\");\r\n    const [royalty, setRoyalty] = useState(0);\r\n    const [showWalletInput, setShowWalletInput] = useState(false);\r\n    const [networkSelected, setNetworkSelected] = useState(false);\r\n    \r\n    const { activate } = useWeb3React();\r\n\r\n    const { ethers } = require('ethers')\r\n\r\n    // API token for nft.storage. Please sign up and replace this with your own key from https://nft.storage/manage/\r\n    const NFT_STORAGE_KEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweGQxZmYyZWFhNzI5Yzk0MTBENTdEMTVCY0IwYTJFMDFkRTI1YjA1MzciLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY0MTk5NTkyMzI5MCwibmFtZSI6IlRyYWRlTWludC1ORlQifQ.wge-Vmc2a4xZS1VUrWj2XMbcqrG3-wFFcZIDN7w7lzE\";\r\n\r\n    const beforeUpload = (file, fileList) => {\r\n        console.log(file, fileList);\r\n        setFile(file);\r\n        setFileType(file.type);\r\n        setFileName(file.name); \r\n        setFilePreview(URL.createObjectURL(file));\r\n        return false;\r\n    } \r\n\r\n     const uploadButton = (\r\n       <div>\r\n          <IconContext.Provider value={{ size: '30px', style: { marginLeft: '220px', marginTop: '80px', color: 'white' } }}><AiOutlineCloudUpload /></IconContext.Provider>\r\n       </div>\r\n        \r\n    );\r\n\r\n    const previewImg = <img src={filePreview} style={{width: \"100%\"}}/>\r\n    const previewVideo = <video width=\"100%\" controls><source src={filePreview}/></video>\r\n    const previewAudio = <audio controls className=\"previewAudio\" src={filePreview}></audio>\r\n    const previewModel = <model-viewer loading=\"eager\" camera-controls auto-rotate src={filePreview} style={{width: \"100%\", height: \"100%\"}}></model-viewer>\r\n\r\n    const overrideEventDefaults = (event) => {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    };\r\n\r\n    const handleOndragOver = event => {\r\n      event.preventDefault();\r\n    }\r\n\r\n    const handleOndrop = event => {\r\n      //prevent the browser from opening the image\r\n      event.preventDefault(); \r\n      event.stopPropagation(); \r\n      //let's grab the image file\r\n      let imageFile = event.dataTransfer.files[0];\r\n      beforeUpload(imageFile);\r\n  }\r\n    \r\n    const uploadView = (\r\n    <label className=\"custom-file-upload\"\r\n    onDrop={handleOndrop}\r\n    onDragEnter={overrideEventDefaults}\r\n    onDragLeave={overrideEventDefaults}\r\n    onDragOver={handleOndragOver}\r\n    >\r\n      <Upload\r\n        name=\"avatar\"\r\n        accept=\".jpg,.png,.gif,.svg,.mp4,.webm,.mp3,.wav,.ogg,.glb,.glt\"\r\n        listType=\"picture-card\"\r\n        className=\"fileUpload\"\r\n        showUploadList={false}\r\n        action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n        beforeUpload={beforeUpload}\r\n        onDrop={handleOndrop}\r\n        onDragEnter={overrideEventDefaults}\r\n        onDragLeave={overrideEventDefaults}\r\n        onDragOver={handleOndragOver}\r\n      >\r\n      </Upload>\r\n      {!filePreview ? uploadButton : previewFileType.includes(\"image\") ? previewImg : previewFileType.includes(\"video\") ? previewVideo : previewFileType.includes(\"audio\") ? previewAudio : previewFileName.endsWith('.glb') ? previewModel : <div><img src=\"assets/img/uploaderror.png\" className=\"uploadError\" /><p className=\"errorMessage\">File format not supported.</p></div>}\r\n    </label>\r\n  );\r\n\r\n    const mintEnabled = file != null && !!nftName && networkSelected == true || royalty > 0 && royalty <= 100;\r\n\r\n    const addPolygonNetwork = async () => {\r\n      try {\r\n        const provider = await injected.getProvider()\r\n        // rpc request to switch chain to an ethereum compatible chain\r\n        await provider.request({ method: 'wallet_addEthereumChain', params: [POLYGON_TESTNET_PARAMS] })\r\n        setNetworkSelected(true) \r\n      } catch (e) {\r\n        console.log('Failed to switch to Polygon chain, Please check your internet connect reconnect again')\r\n        console.log(e)\r\n      }\r\n    }\r\n\r\n    const addEthNetwork = async () => {\r\n      try {\r\n        const provider = await injected.getProvider()\r\n        // rpc request to switch chain to an ethereum compatible chain\r\n        await provider.request({ method: 'wallet_switchEthereumChain', params: [{chainId: '0x4'}] })\r\n        setNetworkSelected(true)\r\n      } catch (e) {\r\n        console.log('Failed to switch to Ethereum chain, Please check your internet connect reconnect again')\r\n        console.log(e)\r\n      }\r\n    }\r\n\r\n    const mintNFT = async ({image, name, description, percentage, payout}) => {\r\n      // First we use the nft.storage client library to add the image and metadata to IPFS / Filecoin\r\n      console.log(percentage)\r\n      const client = new NFTStorage({ token: NFT_STORAGE_KEY });\r\n      setStatus(\"Uploading to nft.storage...\")\r\n      const metadata = await client.store({\r\n        name,\r\n        description,\r\n        image,\r\n        percentage,\r\n        payout\r\n      });\r\n     setStatus(`Upload complete! Minting token with metadata URI: ${metadata.url}`);\r\n\r\n      // the returned metadata.url has the IPFS URI we want to add.\r\n      // our smart contract already prefixes URIs with \"ipfs://\", so we remove it before calling the `mintToken` function\r\n      const metadataURI = metadata.url.replace(/^ipfs:\\/\\//, \"\");\r\n\r\n      const web3 = new Web3(window.ethereum)\r\n      const accounts = await web3.eth.getAccounts()\r\n\r\n      const networkId = await web3.eth.net.getId()\r\n      console.log(networkId)\r\n\r\n      const networkData = Nft.networks[networkId]\r\n      console.log(networkData)\r\n      \r\n      console.log(percentage)\r\n      console.log(payout)\r\n      \r\n      if(networkData) {\r\n        const abi = Nft.abi;\r\n        const address = networkData.address;\r\n        setAddress(address);\r\n        console.log(address)\r\n        const contract = new web3.eth.Contract(abi, address)\r\n         setContract(contract);\r\n        console.log(contract)\r\n\r\n        try{\r\n          const tx = {\r\n            // this could be provider.addresses[0] if it exists\r\n            from: accounts[0],\r\n            // target address, this could be a smart contract address\r\n            to: address,\r\n            gasPrice: web3.eth.gas_price,\r\n            // this encodes the ABI of the method and the arguements\r\n            data: contract.methods.mintToken(accounts[0], metadataURI, payout, percentage).encodeABI()\r\n          };\r\n          setStatus(\"Blockchain transaction sent, waiting confirmation...\");\r\n\r\n          console.log(tx)\r\n\r\n          const txHash = await window.ethereum.request({\r\n            method: 'eth_sendTransaction',\r\n            params: [tx],\r\n          });\r\n          setTxHash(txHash);\r\n          console.log(txHash);\r\n\r\n          setStatus(\"View your transaction and your token id on block explorer.\")\r\n          setIsMinted(true)\r\n          setShowAddress(true)\r\n          console.log(\"NFT minted to: \", address)\r\n\r\n          // web3.eth.getTransactionReceipt(txHash).then(function(data){\r\n          // // let tokenId = null;\r\n          // let transaction = data;\r\n          // console.log(transaction)\r\n          // let logs = transaction.logs;\r\n          // console.log(logs);\r\n          // // tokenId = web3.utils.hexToNumber(logs[0].topics[3])\r\n          // // setStatus(`Minted token with ID: ${tokenId}`)\r\n          // // setIsMinted(true)\r\n          // // setShowAddress(true)\r\n          // // return tokenId;\r\n          // });\r\n        } catch (error) {\r\n          <p style={{color: 'white'}}>{setStatus(\"Blockchain transaction failed.\")}</p>\r\n        }\r\n      }\r\n    } \r\n\r\n    const getRoyaltyData = async() => {\r\n\r\n      const web3 = new Web3(window.ethereum)\r\n      const abi = Nft.abi;\r\n      const networkId = await web3.eth.net.getId()\r\n      const networkData = Nft.networks[networkId]\r\n      const address = networkData.address;\r\n      const contract = new web3.eth.Contract(abi, address)\r\n\r\n\r\n      const royaltyData = await contract.methods.royaltyInfo(1, 10000).call();\r\n      console.log(royaltyData)\r\n    }  \r\n\r\n    useEffect(() => {\r\n      getRoyaltyData();\r\n    }, [])\r\n  \r\n\r\n  async function connect() {\r\n    try{\r\n        await activate(injected)\r\n        console.log(injected)\r\n        await window.ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n    }\r\n    catch(ex){\r\n        console.log(ex);\r\n    }\r\n  }\r\n\r\n  const startMinting = async () => {\r\n    console.log(`minting nft with name ${nftName}`);\r\n    setMinting(true);\r\n\r\n    await connect()\r\n\r\n    // A Web3Provider wraps a standard Web3 provider, which is\r\n    // what MetaMask injects as window.ethereum into each page\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n\r\n    // The MetaMask plugin also allows signing transactions to\r\n    // send ether and pay to change state within the blockchain.\r\n    // For this, you need the account signer...\r\n    const signer = provider.getSigner()\r\n \r\n    signer.getAddress().then(accounts => {\r\n      mintNFT({\r\n        contract,\r\n        provider,\r\n        accounts,\r\n        gasPrice,\r\n        setStatus,\r\n        name: nftName,\r\n        image: file,\r\n        description,\r\n        percentage: royalty,\r\n        payout: recipient\r\n      }).then(newTokenId => {\r\n        setMinting(false);\r\n        console.log('minting complete');\r\n        setTokenId(newTokenId);\r\n      })\r\n    });\r\n  }\r\n\r\n  const mintButton = (\r\n    <Button type=\"primary\" className='mint-button' disabled={!mintEnabled} onClick={startMinting}>\r\n      {minting ? <LoadingOutlined/> : \"Mint\"}\r\n    </Button>\r\n  )\r\n\r\n  const handleChange = (e) => {\r\n    setShowWalletInput(true)\r\n    setRoyalty(e.target.value)\r\n    console.log(e.target.value)\r\n  }\r\n\r\n  const copy = async () => {\r\n    await navigator.clipboard.writeText(txHash);\r\n  }\r\n\r\n  const handleKeyPress = (e) => {\r\n    const character = e.key;\r\n    const characterNum = Number(character);\r\n    if (character === 'Backspace') return;\r\n    if (characterNum >= 0 && characterNum <= 9) {\r\n      if (e.target.value && e.target.value.length) {\r\n        return\r\n      }\r\n      else if (characterNum === 0) {\r\n        e.preventDefault()\r\n      }\r\n    }\r\n    else {\r\n      e.preventDefault()\r\n    }\r\n    console.log(e.target.value)\r\n  }\r\n\r\n    return(\r\n      <div>\r\n        <div className=\"minter-form\">\r\n            <form>\r\n                <h5>Create New NFTs</h5>\r\n                <label className=\"mint-label\">Image, Video, Audio, or 3D Model</label><br/>\r\n                <label className=\"small-label\">File types supported: [JPG, PNG, GIF, SVG, MP4, WEBM, MP3, WAV, OGG, GLB, GLT]</label>\r\n                <br/>\r\n                {uploadView}\r\n                <br/>\r\n                <label className=\"mint-label\">Blockchain : </label>\r\n                <br/>\r\n                <div className='chain-options'>\r\n                  <div className='eth'>\r\n                       <input type=\"radio\" id=\"eth-text\" name=\"chain_options\" value=\"4\" onChange={() => addEthNetwork()} />\r\n                       <label for=\"eth-text\">Ethereum</label>\r\n                  </div>\r\n                  <div className='polygon'>\r\n                      <input type=\"radio\" id=\"polygon-text\" name=\"chain_options\" value=\"80001\" onChange={() => addPolygonNetwork()}  />\r\n                      <label for=\"polygon-text\">Polygon</label>\r\n                  </div>\r\n                </div>\r\n                <label className=\"mint-label\">Name : </label>\r\n                <br/>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"input-text form-control my-2\"\r\n                    placeholder=\"Nft Name\"\r\n                    onChange={e => {setNftName(e.target.value)}}\r\n                />\r\n                <label className=\"mint-label\">Description : </label>\r\n                <textarea\r\n                    className=\"/*minter-form-textarea*/ minter-textarea form-control my-2\"\r\n                    placeholder=\"Provide a detailed explanation of your item\"\r\n                    rows={10}\r\n                    defaultValue=\"\"\r\n                    onChange={e => {setDescription(e.target.value)}}\r\n                />\r\n                <label className='mint-label'>Creator Earnings : </label><br/>\r\n                <label className='small-label'>Percentage fee</label><br/>\r\n                <input type=\"number\" className='royalty-input' placeholder='e.g. 1, 3, 5, 10...' onKeyDown={handleKeyPress} onWheel={(e) => e.target.blur()} onChange={(e) => handleChange(e)}></input>\r\n                {royalty > 100 ? <p className='percentage-error'>Total percentage cannot exceed 100%</p> : null}\r\n                {\r\n                  showWalletInput == true && royalty > 0 && royalty <= 100 ? \r\n                  (<><label className='mint-label'>Your payout wallet address: </label><br />\r\n                  <input type=\"text\" className='royalty-input' placeholder='Please enter an address, e.g. 0x2bc5...' onChange={(e) => {setRecipient(e.target.value)}}></input>\r\n                  </>)\r\n                  : null\r\n                }\r\n                <br/><br/>\r\n                {mintButton}\r\n            </form>\r\n            <br/>\r\n            <p style={{color: 'white'}}>{status}</p>\r\n            <br/>\r\n            <div className='hash-container' style={{position: 'center', color: 'white'}}>\r\n              {showAddress ? <div style={{width: '280px'}}>Copy Transaction Hash: </div> : null}     \r\n              {showAddress ? <button className=\"hash-holder\" onClick={copy} style={{color: 'black'}}>{txHash.substring(0,6) + \"...\" + txHash.slice(txHash.length - 4)}</button>  : null}\r\n            </div>\r\n            <br/>\r\n            {/* {isMinted ? <Link to=\"/NFTViewer\" className='view-nft-link'>View your NFT</Link> : null} */}\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Minter\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Minter from './Minter';\nimport {HashRouter as Router,Route,Routes} from 'react-router-dom';\nimport Web3 from 'web3';\nimport { Web3ReactProvider } from '@web3-react/core';\n\nfunction getLibrary(provider){\n  return new Web3(provider);\n}\n\nfunction App() {\n  const [isConnected, setIsConnected] = useState(false);\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  const onLogin = async (provider) => {\n    // const web3 = new Web3(provider);\n    const web3 = new Web3(provider);\n    const accounts = await web3.eth.getAccounts();\n    if(accounts.length === 0) {\n      console.log(\"Please connect to MetaMask!\")\n    }\n    else if (accounts[0] !== currentAccount) {\n      setCurrentAccount(accounts[0]);\n      setIsConnected(true);\n    }\n  };\n\n  const onLogout = () => {\n    setIsConnected(false);\n  };\n\n  return (\n    <div>\n      <Router>\n        <Web3ReactProvider getLibrary={getLibrary}>\n            <Header onLogin={onLogin} onLogout={onLogout} />\n              <Routes>\n                <Route path='/' element={<Minter /> } />\n              </Routes>\n        </Web3ReactProvider>\n      </Router>\n    </div>\n  )\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { MoralisProvider } from \"react-moralis\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MoralisProvider appId=\"z3GKCJm0vzMtbTJGxq1c0j9YFoqxkeLtfR8uQ5Nk\" serverUrl=\"https://1xmnt9o4gskm.usemoralis.com:2053/server\">\n      <App />  \n    </MoralisProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}